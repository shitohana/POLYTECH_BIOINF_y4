---
title: "Gene Prediction"
format: 
   revealjs:
      theme: style.scss
      center: true
      controls: true
      # controlsLayout: 'bottom-left'
      slide-number: true
      show-slide-number: all
      # fontsize: 40px
      progress: true
      
       #center-title-slide: false
# incremental: true 
author:
- Владислав Станин
date: 11/22/2024
---

## Данные

Сегодня будем всячески аннотировать хромосому непатогенного гриба **Fusarium oxysporum Fo47.**

::: {.fragment .fade-in}
Файл `chr_fo47.fasta`
:::

## Перед идентификацией генов поговорим о чём помельче... {transition="slide-out"}

## Repeats and transposons {auto-animate="true" style="text-align: center"}

## Repeats and transposons {auto-animate="true" style="text-align: center"}

Повторы могут мешать при аннотации генома, пораждая **ложные гены и открытые рамки**.

::: {.fragment .fade-in}
Поэтому мы их замаскируем - поменяем на `NNNNN`
:::

## RepeatMasker

На основе известных последовательностей

*Самый простой способ:*

``` bash
RepeatMasker <fasta-file>
```

или (смотря откуда скачивали)

``` bash
repeatmasker <fasta-file>
```

`--xsmall` для *softmasking*

::: {.fragment .fade-in}
-   **Удалит и малые РНК** - осторожно!
-   Можно использовать базу Dfam цкликом (8.9Gb)
-   Предсказывать транспозоны *ab initio*: **Repeatmodeler**
:::

## tRNA {auto-animate="true"}

**tRNAScan-SE**

``` bash
trnascan-se -E <input fasta> -o <output>
```

**или** (смотря откуда вы скачивали)

``` bash
tRNAscan-SE -E <input fasta> -o <output>
```

`-E` - обозначает поиск эукариотических тРНК

## tRNA {auto-animate="true"}

**tRNAScan-SE**

```         
  -E         : search for eukaryotic tRNAs (default)
  -B         : search for bacterial tRNAs
  -A         : search for archaeal tRNAs
  -M <model> : search for mitochondrial tRNAs
                 options: mammal, vert
  -O         : search for other organellar tRNAs
  -G         : use general tRNA model (cytoslic tRNAs from all 3 domains included)
```

## rRNA

**barrnap**

``` bash
barrnap --kingdom euk <fasta file>
```

`--kingdom euk` - чтобы искать **28S, 18S, 5.8S, 5S**

::: {.fragment .fade-in}
`--kingdom [X]` Kingdom: *euk, bac, arc, mito* **(default 'bac')**
:::

## RNA from Rfam via HMMER3

``` {.bash code-line-numbers="|4|5|6|"}
wget https://ftp.ebi.ac.uk/pub/databases/Rfam/CURRENT/Rfam.seed.gz
gunzip -k Rfam.seed.gz

hmmbuild Rfam.seed.hmm Rfam.seed
hmmpress Rfam.seed.hmm
nhmmscan --tblout rnas_result.txt Rfam.seed.hmm <fasta file> 
```

Кстати, `Rfam.seed` - не FASTA!

## Подбираемся к белок-кодирующим генам {style="text-align: center" transition="slide-out"}

## Open reading frame {auto-animate="true" style="text-align: center"}

## Open reading frame {auto-animate="true" style="text-align: center"}

![](_files/gene_prediction/orf.jpeg){fig-align="center" width="750"}

Самое простое представление гена (но неверное):\
**Последовательность триплетов от старт- до стоп-кодона**

------------------------------------------------------------------------

### NCBI online tool

[**ORFfinder**](https://www.ncbi.nlm.nih.gov/orffinder/)

### Utilities from EMBOSS:

**getorf**

``` bash
getorf -sequence <inputfile> -outseq <outputfile>
```

::: {.fragment .fade-in}
Longest ORF (3 штуки):

``` bash
seqkit fx2tab --length <orf fasta file> | \
   sort -t $'\t' -k4,4nr | \
   head -n 3 | seqkit tab2fx > longest_orf.fasta
```
:::

<!-- #### **transeq** -->

<!-- ``` bash -->

<!-- transeq -sequence <input ORF file> \ -->

<!--    -outseq <outputfile> -->

<!-- ``` -->

------------------------------------------------------------------------

-   [**ORF - не ген, а просто открытая рамка, которая может найтись даже случано**]{.underline}

-   **Не учитывает интроны** в ДНК (плох для эукариот)

-   Важно выбрать специфический **генетический код**

-   Можно использовать для мРНК (нет интронов, но проблемы с UTR)

## Coding sequence (CDS) {auto-animate="true" style="text-align: center"}

## Coding sequence (CDS) {auto-animate="true" style="text-align: center"}

Отражает кодирующие области гена (экзоны без UTR) и альтреанативный сплайсинг.

## Coding sequence (CDS) {auto-animate="true" style="text-align: center"}

Отражает кодирующие области гена (экзоны без UTR) и альтреанативный сплайсинг.

![](_files/gene_prediction/gene_struct.jpg){fig-align="center" width="1400"}

(Синие области - **CDS**)

## GeneMark

Семейство программ для разметки генов.

::::: columns
::: {.column width="38%"}
1.  **GeneMark.hmm**

    -   [прокариоты](https://genemark.bme.gatech.edu/GeneMark/gmhmmp.cgi)
    -   [эукариоты](https://genemark.bme.gatech.edu/GeneMark/gmhmme.cgi)
    -   [*метагеномы*](https://genemark.bme.gatech.edu/GeneMark/meta_gmhmmp.cgi)
:::

::: {.column width="62%"}
2.  [**GeneMark-S2**](https://genemark.bme.gatech.edu/GeneMark/genemarks2.cgi) - *self-training* и только прокариоты, археи

Все версии [ТУТ](https://genemark.bme.gatech.edu/GeneMark/), включая новейшие standalone версии
:::
:::::

**Важно выбрать модель организма наиболее близкого к вашему**

## Augustus {auto-animate="true"}

``` {.bash code-line-numbers="1,7|2|3|4|5|6|"}
augustus \
   --protein=on \ # предсказать кодируемые белки
   --hintsfile=<gff-file> \ # "подсказки"-гены
   --genemodel=complete \ # только полные гены
   --species=human \ # надо выбрать species!
   fasta.file > output.gff
```

Список параметров и доступных species: [документация](https://github.com/Gaius-Augustus/Augustus/blob/master/docs/RUNNING-AUGUSTUS.md#basic-usage)

Готовые подсказки - это gff-файл, где часть структур уже размечено (optional)

`--genemodel` по умолчанию **partial** - находит даже частичные гены

## Augustus {auto-animate="true"}

Если вашего species нету, то можно **обучить** Augustus, используя известные гены родственного организма. Например, из ENSEMBL или даже с [сайта Augustus](http://bioinf.uni-greifswald.de/augustus/datasets/)

[**Туториал**](https://bioinf.uni-greifswald.de/augustus/binaries/tutorial/training.html)

## Augustus {auto-animate="true"}

Содержит в себе много полезных скриптов, например

``` bash
getAnnoFasta.pl <augustus.gff>
```

создает FASTA с предсказанными Augustus белками

## BUSCO

Benchmarking Universal **Single-Copy Orthologs** - база данных с говорящим названием. Чаще используется для оценки "полноты" **полного генома**

``` {.bash code-line-numbers="|1|2|3|4|"}
busco -i <fasta file> \
   -m genome \
   -l <lineage> \
   --cpu 8 \
   -o <output directory>
```

`-m` - можно указать **protein** - аннотация будет по протеому - тогда для `-i` надо указать *fasta* с белками

**Работает только с VPN или локально скачанными базами lineage**

## BUSCO {auto-animate="true"}

При первых запусках новые lineage будут скачиваться локально. Но этого не проивойдет без VPN... Для запуска оффлайн нужно скачать нужные базы и положить их в директорию опеределнным образом:

```         
busco_downloads/
├── file_versions.tsv
└── lineages
    ├── ascomycota_odb10
    ├── fungi_odb10
    └── hypocreales_odb10
```

базы odb надо скачать... с VPN... [**отсюда**](https://busco-data.ezlab.org/v5/data/) или попросить у товарища

## BUSCO {auto-animate="true"}

Запускаем оффлайн

``` {.bash code-line-numbers="4,5|f"}
busco -i <fasta file> \
   -m genome \
   -l <lineage> \
   --offline \
   --download_path <path/to/directory> \
   --cpu 8 \
   -o <output directory>
```

Скачанный lineage лучше указывать не как **fusarium**, а как **fusarium_odb10** - то есть навзание папки, так как версии lineage могут отличаться.

## BUSCO {transition="fade-out"}

Benchmarking Universal **Single-Copy Orthologs**

``` {.bash code-line-numbers="3"}
busco -i <fasta file> \
   -m <genome/protein> \
   --auto-lineage \ # если не уверены какой lineage
   --cpu 8 \
   -o <output directory>
```

Но это не панацея - **он ошибается**

::: {.fragment .fade-in}
-   `--auto-lineage-euk` - среди эукариот
-   `--auto-lineage-prok`- среди прокариот
:::

## BUSCO output {auto-animate="true"}

Пусть команда была:

``` bash
busco -i chr_fo47.fasta -l fungi_odb10 --offline \
   --download_path busco_downloads \
   -m genome -o busco_output_fungi
```

Папка `busco_output_fungi/run_fungi_odb10/`:

```         
busco_output_fungi/run_fungi_odb10/
├── busco_sequences
├── full_table.tsv
├── hmmer_output
├── miniprot_output
├── missing_busco_list.tsv
├── short_summary.json
└── short_summary.txt
```

## BUSCO output {auto-animate="true"}

Папка `busco_output_fungi/run_fungi_odb10/`:

```         
busco_output_fungi/run_fungi_odb10/
├── busco_sequences
├── full_table.tsv
├── hmmer_output
├── miniprot_output
├── missing_busco_list.tsv
├── short_summary.json
└── short_summary.txt
```

Интереснее всего в *full_table.tsv* - тут аннотация генов и *short_summary.txt* - тут общая статистика и **completeness**

## BUSCO output {auto-animate="true"}

Интереснее всего в *full_table.tsv* - тут аннотация генов и *short_summary.txt* - тут общая статистика и **completeness**

Пример одной и строчек *short_summary.txt*:

``` text
C:11.2%[S:11.2%,D:0.0%],F:0.4%,M:88.4%,n:758,E:11.8%
```

-   C:11.2% - **completeness**
-   \[S:11.2%,D:0.0%\] - однокопийных 11.2% и 0% дупликатов
-   F:0.4% - Fragmented
-   M:88.4% - Missed

## Deep Learning approaches {auto-animate="true" style="text-align: center"}

## Deep Learning approaches {auto-animate="true" style="text-align: center"}

Используют нейронные сети (обычно свёрточные) и машинное обучение для предсказания

::::: columns
::: {.column width="50%"}
**Tiberius**
:::

::: {.column width="50%"}
**Helixer**
:::
:::::

## Deep Learning approaches {auto-animate="true" style="text-align: center"}

::::: columns
::: {.column width="50%"}
**Tiberius**

![](_files/gene_prediction/tiberius.png){fig-align="center"}
:::

::: {.column width="50%"}
**Helixer**

![](_files/gene_prediction/helixer.png){fig-align="center" width="1500"}
:::
:::::

## Homework

Аннотировать хромосомы пивных дрожжей

::::: columns
::: {.column width="50%"}
![](_files/gene_prediction/kvas.jpg){width="570"}
:::

::: {.column width="50%"}
![](_files/gene_prediction/yeasts.jpg){width="612"}
:::
:::::
